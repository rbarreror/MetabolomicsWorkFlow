# Regular expression used to be processed in Python

# To get basic notions in Regular expressions: https://regexone.com/
# More about regular expression: https://www.regular-expressions.info/tutorial.html

[Synonyms]
Synonyms_regex = ;(\n?.*)*$
Synonyms_replace = 

[FMByproduct]
# Remove fungal and microbial by-products
# https://regex101.com/r/pu6VKX/1
FMByproduct_regex = (?<![Vv]itamin)\s([A-Za-z]|[1-9]){1,2}$
FMByproduct_replace = 

[BracketNumber]
# Remove brackets containing numbers
# https://regex101.com/r/yiOkKn/2
BracketNumber_regex = (-?)\[\d(\.\d)*\]-?
BracketNumber_replace = \g<1>

[RomanNumber]
# Remove roman number at the beginning of the compound
# https://regex101.com/r/1Rh6Ab/2
RomanNumber_regex = (?<=^)\(?[ivx]+\)?-|(?<!^)(?<=\s)\(?[ivx]+\)?-
RomanNumber_replace = 

[CompoundType]
# Remove 'Type [IVX]' string from compound names
# https://regex101.com/r/poDK6J/1
CompoundType_regex = (?i)type\s[ivx]+\s
CompoundType_replace = 

[ParenBegin3D]
# Remove 3D information between ( ) at the begining of the compound name. It is
# replaced by nothing including until the character after ')'
# https://regex101.com/r/rE3HIC/1
ParenBegin3D_regex = ^(\([ZERSDLaAbBnNomp+\-±]([,/][ZERSDLaAbBnNomp+\-±])*\)-)+
ParenBegin3D_replace = 

[ParenMiddle3D]
# Remove 3D information between ( ) in the middle of the compound name. It is preceded
# by a dash or \s. It should be replaced by the character before '('. It is done in
# python as '\g<1>'. If it is preceded by a number, it does not match
# https://regex101.com/r/yvx9gV/4
ParenMiddle3D_regex = (?<!\d)([-\s]?)\([ZERSDLaAbBnNomp+\-±]([,/][ZERSDLaAbBnNomp+\-±])*\)-?
ParenMiddle3D_replace = \g<1>

[ParenMiddle3DNumber]
# It is similar to previous one. In this case, if there is a number preceeding the
# ( ), there is a match. However, the replacement is now by: \g<3> == \W
# https://regex101.com/r/hCzJNI/1
ParenMiddle3DNumber_regex = (?<=\d)([-\s]?)\([ZERSDLaAbBnNomp+\-±]([,/][ZERSDLaAbBnNomp+\-±])*\)(\W)?
ParenMiddle3DNumber_replace = \g<3>

[NonParenBegin3D]
# Remove 3D information at the beginning of the compound name when it is not between ( ).
# https://regex101.com/r/tCCHSN/5
NonParenBegin3D_regex = ^(([ZERSDLaAbBnNomp+\-±][,/]?)+?(?=[-\(])-?)+
NonParenBegin3D_replace = 

[NonParenMiddle3D]
# It is exactly the same the previous one but with a dash '-' at the beginning.
# https://regex101.com/r/9nK2MH/5
NonParenMiddle3D_regex = ([-\s])[ZERSDLaAbBnNomp+\-±]([,/]?[ZERSDLaAbBnNomp+\-±])*-
NonParenMiddle3D_replace = \g<1>

[ParenDash3D]
# Capture 3D letters located between '(' and '-'.
# https://regex101.com/r/tXyIpr/1
ParenDash3D_regex = (?<=\()[ZERSDLaAbBnNomp+\-±]([,\s]{,2}[ZERSDLaAbBnNomp+\-±])*-
ParenDash3D_replace = 

[NonParenBegin3DWords]
# Remove 3D isomeric information at the beginning without parenthesis
# https://regex101.com/r/9mPx7Y/2
NonParenBegin3DWords_regex = (?i)^(((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+-)+
NonParenBegin3DWords_replace = 

[NonParenMiddle3DWords]
# Remove 3D words information in the middle of the name. It is replaced by a dash '-'
# https://regex101.com/r/qNK17I/4/
NonParenMiddle3DWords_regex = (?i)[-\s](((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+-)+
NonParenMiddle3DWords_replace = -

[ParenMiddle3DWords]
# Remove ( ) in the middle that only contains 3D words information. It is replaced by nothing.
# https://regex101.com/r/Xb6gr3/5/
ParenMiddle3DWords_regex = (?i)(?<=^)\(((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+\)-?|(?<!^)\(((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+\)
ParenMiddle3DWords_replace = 

[ParenDash3DWords]
# Remove 3D words between '(' and '-'. It is replaced by nothing.
# https://regex101.com/r/ePUhNM/2
ParenDash3DWords_regex = (?i)(?<=\()((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+-
ParenDash3DWords_replace = 

[ParenParenMiddleNumber]
# Remove parenthesis that only contains isomeric information. We perform a look behind
# to see if there is a digit behind '('. In that case, we replace by nothing.
# https://regex101.com/r/DbNpmL/1/
ParenParenMiddleNumber_regex = (?<=\d)\(([^-\s()[\]{}:/\d]*\d)+[^-\s()[\]{}:/\d]*\)
ParenParenMiddleNumber_replace = 

[NumberBegin]
# Remove ismoeric information at the beginning of the compound, identified
# by presence of numbers
# This is removed (replaced by nothing)
# https://regex101.com/r/7k0vNO/6
NumberBegin_regex = ^(([^-()[\]{}\s:/\d]*(,\s)?\d+)+[^-()[\]{}\s:/\d]*-)+
NumberBegin_replace = 

[NumberMiddle]
# This is replaced by '-'
# https://regex101.com/r/TMbHFj/3
NumberMiddle_regex = ([-\s])(([^-()[\]{}\s:/\d]*[,\s]{,2}\d+)+[^-()[\]{}\s:/\d]*-)+
NumberMiddle_replace = \g<1>

[ParenParenBegin]
# Remove isomeric information between parenthesis at the beginning of the
# compound name. It is identified by the presence of a number. 
# This is removed (replaced by nothing).
# https://regex101.com/r/IFyxm2/1
ParenParenBegin_regex = ^(\(([^-\s()[\]{}:/\d]*(,\s)?\d)+[^-\s()[\]{}:/\d]*\)\W?)+
ParenParenBegin_replace = 

[ParenParenMiddle]
# The same as ParenParenMiddleNumber, but in this case we ensure that there is not
# a number behind '('. In that case, it is removed the non alpha-numeric character
# after ')'.
# https://regex101.com/r/XWQdls/2
ParenParenMiddle_regex = \((?<!\d\()([^-\s()[\]{}:/\d]*[,\s]{,2}\d)+[^-\s()[\]{}:/\d]*(-b)?\)\W?
ParenParenMiddle_replace = 

[ParenDash]
# Remove isomeric information between opening '(' '[' and '{' and dash '-'. The
# openning character is maintained.
# https://regex101.com/r/6Mw4om/1
ParenDash_regex = (?<=[\(\[\{])([^-()[\]{}\s:/\d]*\d)+[^-()[\]{}\s:/\d]*-(?!\))
ParenDash_replace = 

[AcidToSalt]
# Parse acid names to the salt version
# https://regex101.com/r/HuZc7y/1
AcidToSalt_regex = (?i)ic acid
AcidToSalt_replace = ate